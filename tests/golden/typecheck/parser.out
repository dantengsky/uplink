Script
  { scriptEnums = []
  , scriptDefs =
      [ GlobalDef
          TFloat RoleAny Name { unName = "x" } (ELit (LFloat 0.0))
      , GlobalDef
          (TFixed Prec3)
          RoleAny
          Name { unName = "f" }
          (ELit (LFixed (Fixed3 (F3 1.234))))
      , GlobalDefNull (TFixed Prec2) RoleAny Name { unName = "q" }
      , LocalDef TInt Name { unName = "y" } (ELit (LInt 7))
      , LocalDefNull TFloat Name { unName = "v" }
      , GlobalDef
          (TAsset (TFractional Prec5))
          RoleAny
          Name { unName = "z" }
          (ELit
             (LAsset (Address "H1tbrEKWGpbPjSeG856kz2DjViCwMU3qTw3i1PqCLz65")))
      , GlobalDef
          TContract
          RoleAny
          Name { unName = "c" }
          (ELit
             (LContract
                (Address "H1tbrEKWGpbPjSeG856kz2DjViCwMU3qTw3i1PqCLz65")))
      , GlobalDef
          TAccount
          RoleAny
          Name { unName = "a" }
          (ELit
             (LAccount
                (Address "H1tbrEKWGpbPjSeG856kz2DjViCwMU3qTw3i1PqCLz65")))
      , GlobalDefNull TDateTime RoleAny Name { unName = "dt" }
      ]
  , scriptTransitions =
      [ Arrow Initial (Step Label { unLabel = "setX" })
      , Arrow
          (Step Label { unLabel = "setX" })
          (Step Label { unLabel = "update" })
      , Arrow
          (Step Label { unLabel = "update" })
          (Step Label { unLabel = "setX" })
      , Arrow
          (Step Label { unLabel = "setX" })
          (Step Label { unLabel = "setup" })
      , Arrow
          (Step Label { unLabel = "update" })
          (Step Label { unLabel = "setup" })
      , Arrow
          (Step Label { unLabel = "setup" })
          (Step Label { unLabel = "confirmation" })
      , Arrow
          (Step Label { unLabel = "confirmation" })
          (Step Label { unLabel = "settlement" })
      , Arrow (Step Label { unLabel = "settlement" }) Terminal
      , Arrow Initial (Step Label { unLabel = "circulated" })
      , Arrow (Step Label { unLabel = "circulated" }) Terminal
      ]
  , scriptMethods =
      [ Method
          { methodTag = Main Label { unLabel = "setDate" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "setDate" }
          , methodArgs = []
          , methodBody =
              EAssign
                Name { unName = "dt" }
                (ELit
                   (LDateTime
                      DateTime
                        { unDateTime =
                            Datetime
                              { year = 2020
                              , month = 10
                              , day = 20
                              , hour = 15
                              , minute = 50
                              , second = 12
                              , zone = 0
                              , week_day = 2
                              }
                        }))
          }
      , Method
          { methodTag = Main Label { unLabel = "initial" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "initialize" }
          , methodArgs = []
          , methodBody =
              ECall
                (Left Transition) [ ELit (LState Label { unLabel = "setX" }) ]
          }
      , Method
          { methodTag = Main Label { unLabel = "setup" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "confirm" }
          , methodArgs = []
          , methodBody =
              ECall
                (Left Transition)
                [ ELit (LState Label { unLabel = "confirmation" }) ]
          }
      , Method
          { methodTag = Main Label { unLabel = "confirmation" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "settle" }
          , methodArgs = []
          , methodBody =
              ECall
                (Left Transition)
                [ ELit (LState Label { unLabel = "settlement" }) ]
          }
      , Method
          { methodTag = Main Label { unLabel = "settlement" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "finalize" }
          , methodArgs = []
          , methodBody =
              ECall
                (Left Transition) [ ELit (LState Label { unLabel = "terminal" }) ]
          }
      , Method
          { methodTag = Main Label { unLabel = "setX" }
          , methodAccess =
              RoleAnyOf
                [ ELit
                    (LAccount (Address "H1tbrEKWGpbPjSeG856kz2DjViCwMU3qTw3i1PqCLz65"))
                ]
          , methodName = Name { unName = "setX" }
          , methodArgs =
              [ Arg { argType = TInt , argName = Name { unName = "j" } }
              , Arg { argType = TFloat , argName = Name { unName = "k" } }
              ]
          , methodBody =
              ESeq
                (EAssign Name { unName = "x" } (EVar Name { unName = "k" }))
                (ESeq
                   (EAssign
                      Name { unName = "y" }
                      (EBinOp
                         Mul (EVar Name { unName = "y" }) (EVar Name { unName = "j" })))
                   (ESeq
                      (EAssign
                         Name { unName = "f" }
                         (EBinOp
                            Add
                            (ELit (LFixed (Fixed3 (F3 2.516))))
                            (EVar Name { unName = "f" })))
                      (ESeq
                         (EAssign
                            Name { unName = "x" }
                            (EBinOp
                               Add
                               (ECall
                                  (Left Fixed3ToFloat)
                                  [ ECall (Left FloatToFixed3) [ EVar Name { unName = "k" } ] ])
                               (EVar Name { unName = "x" })))
                         (ECall
                            (Left Transition)
                            [ ELit (LState Label { unLabel = "update" }) ]))))
          }
      , Method
          { methodTag = Main Label { unLabel = "setX" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "fixX" }
          , methodArgs = []
          , methodBody =
              ECall
                (Left Transition) [ ELit (LState Label { unLabel = "setup" }) ]
          }
      , Method
          { methodTag = Main Label { unLabel = "update" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "fixY" }
          , methodArgs = []
          , methodBody =
              ECall
                (Left Transition) [ ELit (LState Label { unLabel = "setup" }) ]
          }
      , Method
          { methodTag = Main Label { unLabel = "update" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "update" }
          , methodArgs = []
          , methodBody =
              ESeq
                (EAssign
                   Name { unName = "j" }
                   (EBinOp
                      Add
                      (ELit (LInt 10))
                      (EBinOp Mul (ELit (LInt 7)) (ELit (LInt 10)))))
                (ESeq
                   (EAssign Name { unName = "k" } (EVar Name { unName = "j" }))
                   (ESeq
                      (EAssign Name { unName = "l" } (EVar Name { unName = "k" }))
                      (ESeq
                         (EAssign
                            Name { unName = "m" }
                            (EBinOp
                               Div
                               (EBinOp
                                  Sub
                                  (EBinOp
                                     Add
                                     (ELit (LFixed (Fixed2 (F2 1.23))))
                                     (ELit (LFixed (Fixed2 (F2 4.56)))))
                                  (EBinOp
                                     Mul
                                     (ELit (LFixed (Fixed2 (F2 7.89))))
                                     (ELit (LFixed (Fixed2 (F2 9.87))))))
                               (ELit (LFixed (Fixed2 (F2 65.43))))))
                         (ESeq
                            (EAssign
                               Name { unName = "q" }
                               (EBinOp
                                  Add
                                  (EBinOp
                                     Add
                                     (EVar Name { unName = "m" })
                                     (ELit (LFixed (Fixed2 (F2 1.00)))))
                                  (ECall (Left FloatToFixed2) [ EVar Name { unName = "x" } ])))
                            (ECall
                               (Left Transition) [ ELit (LState Label { unLabel = "setX" }) ])))))
          }
      , Method
          { methodTag = Main Label { unLabel = "f" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "f" }
          , methodArgs =
              [ Arg { argType = TInt , argName = Name { unName = "j" } }
              , Arg { argType = TBool , argName = Name { unName = "k" } }
              ]
          , methodBody = EIf (EVar Name { unName = "k" }) ENoOp ENoOp
          }
      , Method
          { methodTag = Main Label { unLabel = "g" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "g" }
          , methodArgs =
              [ Arg
                  { argType = TAsset TDiscrete , argName = Name { unName = "ad" } }
              , Arg { argType = TAccount , argName = Name { unName = "t" } }
              ]
          , methodBody =
              EIf
                (EBinOp
                   And
                   (ECall (Left AssetExists) [ EVar Name { unName = "ad" } ])
                   (ECall (Left AccountExists) [ EVar Name { unName = "t" } ]))
                (ESeq
                   (ECall
                      (Left (AssetPrimOp TransferTo))
                      [ EVar Name { unName = "ad" } , ELit (LInt 20) ])
                   (ECall
                      (Left (AssetPrimOp TransferFrom))
                      [ EVar Name { unName = "ad" }
                      , ELit (LInt 20)
                      , EVar Name { unName = "t" }
                      ]))
                ENoOp
          }
      , Method
          { methodTag = Main Label { unLabel = "initial" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "circulate" }
          , methodArgs =
              [ Arg
                  { argType = TAsset (TFractional Prec2)
                  , argName = Name { unName = "af2" }
                  }
              , Arg
                  { argType = TFixed Prec2 , argName = Name { unName = "amount" } }
              ]
          , methodBody =
              ESeq
                (ECall
                   (Left (AssetPrimOp CirculateSupply))
                   [ EVar Name { unName = "af2" } , EVar Name { unName = "amount" } ])
                (ECall
                   (Left Transition)
                   [ ELit (LState Label { unLabel = "circulated" }) ])
          }
      , Method
          { methodTag = Main Label { unLabel = "circulated" }
          , methodAccess = RoleAny
          , methodName = Name { unName = "transfer" }
          , methodArgs =
              [ Arg
                  { argType = TAsset TBinary , argName = Name { unName = "ab" } }
              , Arg { argType = TAccount , argName = Name { unName = "from" } }
              , Arg { argType = TAccount , argName = Name { unName = "to" } }
              , Arg { argType = TBool , argName = Name { unName = "amount" } }
              ]
          , methodBody =
              ESeq
                (ECall
                   (Left (AssetPrimOp TransferHoldings))
                   [ EVar Name { unName = "from" }
                   , EVar Name { unName = "ab" }
                   , EVar Name { unName = "amount" }
                   , EVar Name { unName = "to" }
                   ])
                (ECall (Left Terminate) [ ELit (LMsg "finished transfer") ])
          }
      ]
  , scriptHelpers =
      [ Helper
          { helperName = Name { unName = "add50" }
          , helperArgs =
              [ Arg { argType = TInt , argName = Name { unName = "xyz" } } ]
          , helperBody =
              EBinOp Add (EVar Name { unName = "xyz" }) (ELit (LInt 50))
          }
      ]
  }